/*
 * internal/infrastructure/protobuf/contracts.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: version not set
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagrouter

import (
	"net/http"
	"strings"

	"github.com/gennadyterekhov/auth-microservice/internal/infrastructure/server/handlers/controllers"
	"github.com/gennadyterekhov/auth-microservice/internal/infrastructure/server/handlers/health"
	"github.com/gennadyterekhov/auth-microservice/internal/infrastructure/server/handlers/login"
	"github.com/gennadyterekhov/auth-microservice/internal/infrastructure/server/handlers/register"
	"github.com/gennadyterekhov/auth-microservice/internal/infrastructure/server/swagger"
	"github.com/gorilla/mux"
)

type Router struct {
	Router      *mux.Router
	Controllers *controllers.Controllers
}

func NewRouter(controllers *controllers.Controllers) *Router {
	gorillaRouter := mux.NewRouter().StrictSlash(true)

	routerInstance := &Router{
		Router:      gorillaRouter,
		Controllers: controllers,
	}
	routerInstance.initializeRoutes()

	return routerInstance
}

func (r *Router) initializeRoutes() {
	type Route struct {
		Name        string
		Method      string
		Pattern     string
		HandlerFunc http.HandlerFunc
	}
	type Routes []Route

	routes := Routes{
		Route{
			"AuthMicroserviceLogin",
			strings.ToUpper("Post"),
			"/api/login",
			login.Handler(r.Controllers.Login).ServeHTTP,
		},

		Route{
			"AuthMicroserviceRegister",
			strings.ToUpper("Post"),
			"/api/register",
			register.Handler(r.Controllers.Register).ServeHTTP,
		},

		Route{
			"Health",
			strings.ToUpper("Get"),
			"/health",
			health.Handler(r.Controllers.Health).ServeHTTP,
		},
		// TODO add check, forget endpoints
		// TODO refactor like in main proj
	}

	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc

		// TODO insert middleware here
		handler = swagger.Logger(handler, route.Name)

		r.Router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}
}
