/*
 * internal/infrastructure/protobuf/contracts.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: version not set
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
	models2 "github.com/gennadyterekhov/auth-microservice/internal/infrastructure/client/swagger/models"
)

// Linger please
var (
	_ context.Context
)

type SearchApiService service

/*
SearchApiService
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ProtobufGetRelevantOrdersResponse
*/
func (a *SearchApiService) ArtDealersGetRelevantOrders(ctx context.Context) (models2.ProtobufGetRelevantOrdersResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue models2.ProtobufGetRelevantOrdersResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/relevant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v models2.ProtobufGetRelevantOrdersResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 0 {
			var v models2.RuntimeError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
SearchApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *SearchApiArtDealersSearchOrdersOpts - Optional Parameters:
     * @param "AuthorID" (optional.String) -
     * @param "BuyerID" (optional.String) -
     * @param "PriceMin" (optional.String) -
     * @param "PriceMax" (optional.String) -
     * @param "Title" (optional.String) -
     * @param "Description" (optional.String) -
     * @param "CreatedAtFrom" (optional.String) -
     * @param "CreatedAtTo" (optional.String) -
     * @param "UpdatedAtFrom" (optional.String) -
     * @param "UpdatedAtTo" (optional.String) -
     * @param "ClosedAtFrom" (optional.String) -
     * @param "ClosedAtTo" (optional.String) -
     * @param "DeletedAtFrom" (optional.String) -
     * @param "DeletedAtTo" (optional.String) -

@return ProtobufSearchOrdersResponse
*/

type SearchApiArtDealersSearchOrdersOpts struct {
	AuthorID      optional.String
	BuyerID       optional.String
	PriceMin      optional.String
	PriceMax      optional.String
	Title         optional.String
	Description   optional.String
	CreatedAtFrom optional.String
	CreatedAtTo   optional.String
	UpdatedAtFrom optional.String
	UpdatedAtTo   optional.String
	ClosedAtFrom  optional.String
	ClosedAtTo    optional.String
	DeletedAtFrom optional.String
	DeletedAtTo   optional.String
}

func (a *SearchApiService) ArtDealersSearchOrders(ctx context.Context, localVarOptionals *SearchApiArtDealersSearchOrdersOpts) (models2.ProtobufSearchOrdersResponse, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue models2.ProtobufSearchOrdersResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/order"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.AuthorID.IsSet() {
		localVarQueryParams.Add("authorID", parameterToString(localVarOptionals.AuthorID.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BuyerID.IsSet() {
		localVarQueryParams.Add("buyerID", parameterToString(localVarOptionals.BuyerID.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PriceMin.IsSet() {
		localVarQueryParams.Add("priceMin", parameterToString(localVarOptionals.PriceMin.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PriceMax.IsSet() {
		localVarQueryParams.Add("priceMax", parameterToString(localVarOptionals.PriceMax.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Title.IsSet() {
		localVarQueryParams.Add("title", parameterToString(localVarOptionals.Title.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Description.IsSet() {
		localVarQueryParams.Add("description", parameterToString(localVarOptionals.Description.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreatedAtFrom.IsSet() {
		localVarQueryParams.Add("CreatedAtFrom", parameterToString(localVarOptionals.CreatedAtFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CreatedAtTo.IsSet() {
		localVarQueryParams.Add("CreatedAtTo", parameterToString(localVarOptionals.CreatedAtTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdatedAtFrom.IsSet() {
		localVarQueryParams.Add("UpdatedAtFrom", parameterToString(localVarOptionals.UpdatedAtFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UpdatedAtTo.IsSet() {
		localVarQueryParams.Add("UpdatedAtTo", parameterToString(localVarOptionals.UpdatedAtTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClosedAtFrom.IsSet() {
		localVarQueryParams.Add("ClosedAtFrom", parameterToString(localVarOptionals.ClosedAtFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ClosedAtTo.IsSet() {
		localVarQueryParams.Add("ClosedAtTo", parameterToString(localVarOptionals.ClosedAtTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeletedAtFrom.IsSet() {
		localVarQueryParams.Add("DeletedAtFrom", parameterToString(localVarOptionals.DeletedAtFrom.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DeletedAtTo.IsSet() {
		localVarQueryParams.Add("DeletedAtTo", parameterToString(localVarOptionals.DeletedAtTo.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v models2.ProtobufSearchOrdersResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 0 {
			var v models2.RuntimeError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
